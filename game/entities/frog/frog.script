function init(self)
	if DEBUG_ID then
		self.frog_name = table.remove(NAMES, DEBUG_ID)
		DEBUG_ID = nil
	else
		self.frog_name = table.remove(NAMES, math.random(#NAMES))
	end
	
	for key, value in pairs(STATS[self.frog_name]) do
		self[key] = value
	end

	change_animation(self.color .. "_frog_idle")
	
	self.is_racing = false
	self.is_finished = false
	self.is_stoppable = false
	self.stamina = self.stamina or math.random(30)
	self.timer = 0
	self.sauce = math.random(10)

	go.set("#sprite", "scale", vmath.vector3(3))
	label.set_text("#frog_name", self.frog_name)
end

function finish_racing(self, did_not_finish)
	self.is_racing = false
	msg.post("/go", hash("frog_finished"), { did_not_finish = did_not_finish })
	change_animation(self.color .. "_frog_" .. (did_not_finish and "idle" or "win"))
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_race") then
		self.is_racing = true
		self.stoppable_timer = timer.delay(self.timer + 0.5, false, function (self, handle, time_elapsed) self.is_stoppable = true end)
		label.set_text("#frog_name", "")
	end

	if message_id == hash("results") and not self.is_finished then
		self.is_finished = true
		label.set_text("#placing", message.position)
		label.set_text("#placing_frog_name", self.frog_name)
		if message.position == "4th" then
			msg.post("/start_button#start_button", hash("race_complete"))
		end
	end

	if message_id == hash("did_not_finish") and self.is_racing then
		finish_racing(self, true)
	end
end

function change_animation(animation_string)
	if go.get("#sprite", "animation") ~= hash(animation_string) then
		sprite.play_flipbook("#sprite", animation_string)
	end
end

function fixed_update(self, dt)
	if go.get("/go#main", "is_race_started") and self.timer > 0 and not self.is_finished then
		self.timer = self.timer - dt
		if self.timer <= 0 then
			self.is_racing = true
		end
	elseif self.is_racing and self.is_stoppable and math.random(self.stamina) == 1 then
		self.timer = math.random(2)
		self.is_racing = false
		self.is_stoppable = false
		self.stoppable_timer = timer.delay(self.timer + 1, false, function (self, handle, time_elapsed) self.is_stoppable = true end)
		change_animation(self.color .. "_frog_idle")
	end
	
	if self.is_racing then
		local start = go.get_position()
		if not self.dest then
			self.dest = vmath.vector3(-200 - self.sauce, 0, 0)
		end
			
		if go.get_position().x <= 110 then
			finish_racing(self)
		else
			if self.frog_name == "Lagswitcher" then
				self.dest = vmath.vector3(math.random(105, 2000), start.y, start.z)
				go.set_position(self.dest)
			else
				go.set_position(start + self.dest * dt)
			end
			change_animation(self.color .. "_frog_hop")
		end
	end
end